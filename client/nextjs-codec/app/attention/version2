import React, { useState, useEffect } from 'react';
import { Eye, MousePointer } from 'lucide-react';

interface AttentionProps {
    code1: string;
    code2: string;
}

interface AttentionResponse {
    success: boolean;
    tokens_code1: string[];
    tokens_code2: string[];
    layer_wise_attention: number[][][][]; // [num_heads][seq_len][seq_len]
    error?: string;
}

const AttentionView: React.FC<AttentionProps> = ({ code1, code2 }) => {
    const [tokens1, setTokens1] = useState<string[]>([]);
    const [tokens2, setTokens2] = useState<string[]>([]);
    const [detokenize1, setDetokenize1] = useState<string>("");
    const [detokenize2, setDetokenize2] = useState<string>("");
    const [attentionData, setAttentionData] = useState<number[][][][]>([]);
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState<string | null>(null);

    // New state for hover interaction
    const [hoveredTokenIndex1, setHoveredTokenIndex1] = useState<number | null>(null);
    const [hoveredTokenIndex2, setHoveredTokenIndex2] = useState<number | null>(null);

    useEffect(() => {
        fetchAttentionData();
    }, [code1, code2]);

    function detokenize(tokens: string[]): string {
        let result = "";

        for (let i = 0; i < tokens.length; i++) {
            let token = tokens[i];

            if (token === "<s>" || token === "</s>" || token === "<pad>") {
                continue; // Ignore special tokens
            }

            if (token === "\u010a") {
                result += "\n"; // Newline
            } else if (token.startsWith("\u0120")) {
                result += " " + token.slice(1); // Space-prefixed token
            } else {
                result += token; // Normal token
            }
        }

        return result;
    }

    useEffect(() => {
        setDetokenize1(detokenize(tokens1));
        setDetokenize2(detokenize(tokens2));
    }, [tokens1, tokens2]);

    const fetchAttentionData = async () => {
        setIsLoading(true);
        setError(null);

        try {
            const response = await fetch('http://localhost:5000/api/visualize/attention', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ code1: code1, code2: code2 }),
            });

            if (!response.ok) {
                throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const data: AttentionResponse = await response.json();
            console.log("API Response:", data);

            if (!data.success) {
                throw new Error(data.error || 'Unknown error from API');
            }

            setTokens1(data.tokens_code1);
            setTokens2(data.tokens_code2);
            setAttentionData(data.layer_wise_attention);
        } catch (error) {
            console.error('Error fetching attention data:', error);
            setError(error instanceof Error ? error.message : 'Unknown error');
        } finally {
            setIsLoading(false);
        }
    };

    const getHighestAttentionTokens = (
        tokenIndex: number,
        isFirstSequence: boolean
    ): number[] => {
        if (!attentionData || attentionData.length === 0) return [];

        const sequenceLength1 = tokens1.length;
        const sequenceLength2 = tokens2.length;
        const sequenceLength = isFirstSequence ? sequenceLength1 : sequenceLength2;

        const highlightedTokens: number[] = [];

        // Aggregate attention across all layers and heads
        const aggregatedAttention = new Array(sequenceLength).fill(0);

        attentionData.forEach(layer => {
            layer.forEach(head => {
                if (isFirstSequence) {
                    // Extract attention for code1 tokens
                    head[tokenIndex].forEach((attentionValue, targetIndex) => {
                        if (targetIndex < sequenceLength1) {
                            aggregatedAttention[targetIndex] += attentionValue;
                        }
                    });
                } else {
                    // Extract attention for code2 tokens
                    head[tokenIndex + sequenceLength1]?.forEach((attentionValue, targetIndex) => {
                        if (targetIndex < sequenceLength2) {
                            aggregatedAttention[targetIndex] += attentionValue;
                        }
                    });
                }
            });
        });

        // Sort tokens by attention value (top 3)
        const sortedTokens = aggregatedAttention
            .map((value, index) => ({ index, value }))
            .sort((a, b) => b.value - a.value)
            .slice(0, 3); // Top 3 tokens

        return sortedTokens.map(t => t.index);
    };

    // Render token with hover interaction
    const renderTokens = (
        tokens: string[],
        isFirstSequence: boolean,
        hoveredIndex: number | null,
        setHoveredIndex: React.Dispatch<React.SetStateAction<number | null>>
    ) => {
        const highlightedTokens = hoveredIndex !== null
            ? getHighestAttentionTokens(hoveredIndex, isFirstSequence)
            : [];

        return tokens.map((token, index) => (
            <span
                key= { index }
                onMouseEnter = {() => setHoveredIndex(index)}
onMouseLeave = {() => setHoveredIndex(null)}
className = {`
                    inline-block px-1 m-0.5 rounded cursor-pointer 
                    ${hoveredIndex === index ? 'bg-blue-200' : ''} 
                    ${highlightedTokens.includes(index) ? 'bg-green-200' : ''}
                `}
            >
    { token }
    </span>
        ));
    };

if (isLoading) return <div>Loading attention data...</div>;
if (error) return <div>Error: { error } </div>;

return (
    <div className= "p-4 bg-gray-950 rounded-lg" >
    <div className="flex items-center mb-2" >
        <Eye className="mr-2 text-blue-500" />
            <h2 className="text-lg font-semibold" > Attention Visualization </h2>
                </div>

                < div className = "grid grid-cols-2 gap-4" >
                    <div>
                    <h3 className="font-medium mb-2" > Code 1 Tokens </h3>
                        < div className = "bg-blue-950 p-2 rounded border" >
                            { renderTokens(tokens1, true, hoveredTokenIndex1, setHoveredTokenIndex1) }
                            </>
                            < pre className = "mt-2 text-sm text-gray-600" > Detokenized: { detokenize1 } </>
                                </div>

                                < div >
                                <h3 className="font-medium mb-2" > Code 2 Tokens </h3>
                                    < div className = "bg-blue-950 p-2 rounded border" >
                                        { renderTokens(tokens2, false, hoveredTokenIndex2, setHoveredTokenIndex2) }
                                        </>
                                        < pre className = "mt-2 text-sm text-gray-600" > Detokenized: { detokenize2 } </>
                                            </div>
                                            </div>

                                            < div className = "mt-4 text-sm text-gray-500 flex items-center" >
                                                <MousePointer className="mr-2 text-blue-500" size = { 16} />
                                                    Hover over tokens to see highest attention connections
                                                        </>
                                                        </div>
    );
};

export default AttentionView;